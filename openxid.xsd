<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2011 (http://www.altova.com) by Dansk Bibliotekscenter A/S (Dansk Bibliotekscenter A/S) -->
<!-- All your id are belong to us -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xid="http://oss.dbc.dk/ns/openxid" targetNamespace="http://oss.dbc.dk/ns/openxid" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="getIdsRequest">
		<xs:annotation>
			<xs:documentation xml:lang="en">The request for all ids that belong to the same cluster as the given id.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="xid:id" maxOccurs="unbounded"/>
				<xs:element ref="xid:callback" minOccurs="0"/>
				<xs:element ref="xid:outputType" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getIdsResponse">
		<xs:annotation>
			<xs:documentation xml:lang="en">The service response.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="xid:getIdResult" maxOccurs="unbounded"/>
				<xs:element ref="xid:error"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="updateIdRequest">
		<xs:annotation>
			<xs:documentation xml:lang="en">The request for updating or deleting existing ids or adding new ones. If an already existing recordId is used it's associated ids are overwritten or deleted.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="xid:recordId"/>
				<xs:element ref="xid:clusterId"/>
				<xs:element ref="xid:id" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="xid:callback" minOccurs="0"/>
				<xs:element ref="xid:outputType" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="updateIdResponse">
		<xs:annotation>
			<xs:documentation xml:lang="en">The service response.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="xid:updateIdStatus" maxOccurs="unbounded"/>
				<xs:element ref="xid:error"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="callback" type="xs:string">
		<xs:annotation>
			<xs:documentation xml:lang="en">If outputType=json.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="clusterId" type="xs:string">
		<xs:annotation>
			<xs:documentation xml:lang="en">Identifier of danbib cluster</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="error" type="xid:errorType">
		<xs:annotation>
			<xs:documentation xml:lang="en">errors.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="getIdResult">
		<xs:annotation>
			<xs:documentation xml:lang="en">requestedId and ids from the same cluster. If the database can not be reached or the requested id is not found id will still be returned in a normalized form together with requestedId and an error message. If nothing is found and id can not be normalised only requestedId and an error message will be returned</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="xid:requestedId"/>
				<xs:element ref="xid:ids" minOccurs="0" maxOccurs="1"/>
				<xs:element ref="xid:error" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="id">
		<xs:annotation>
			<xs:documentation xml:lang="en">Unique identifier of an item</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="xid:idType"/>
				<xs:element ref="xid:idValue"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="idType" type="xid:idTypeType">
		<xs:annotation>
			<xs:documentation xml:lang="en">Type of identifier</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="idValue" type="xs:string">
		<xs:annotation>
			<xs:documentation xml:lang="en">Value of identifier</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="ids">
		<xs:annotation>
			<xs:documentation xml:lang="en">All ids that belong to the same cluster as the id in the request including the requested id in a normalized form.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="xid:id" minOccurs="1" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="outputType" type="xid:outputTypeType">
		<xs:annotation>
			<xs:documentation xml:lang="en">E.g. xml, json or php.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="recordId" type="xs:string">
		<xs:annotation>
			<xs:documentation xml:lang="en">Unique identifier of a record entry (a set of ids from the same record). When service is used with danbib, it's value is equivalent to danbib id.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="requestedId">
		<xs:annotation>
			<xs:documentation xml:lang="en">Identifier of the requested id (non-normalised echo of id in getIdsRequest) used for keeping track of getIdRequests containing multiple ids</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="xid:idType"/>
				<xs:element ref="xid:idValue"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="updateIdOk">
		<xs:annotation>
			<xs:documentation xml:lang="en">Indicator that the requested update has been done</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="updateIdStatus">
		<xs:annotation>
			<xs:documentation xml:lang="en">Returned for each id for which an update has been requested, stating whether each id has been added</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="xid:id" minOccurs="0"/>
				<xs:choice>
					<xs:element ref="xid:updateIdOk"/>
					<xs:element ref="xid:error"/>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:simpleType name="errorType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="authentication error"/>
			<xs:enumeration value="could not reach database"/>
			<xs:enumeration value="invalid id"/>
			<xs:enumeration value="invalid idType"/>
			<xs:enumeration value="no results found for requested id"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="idTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="faust"/>
			<xs:enumeration value="ean"/>
			<xs:enumeration value="issn"/>
			<xs:enumeration value="local"/>
			<xs:enumeration value="oclc"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="outputTypeType">
		<xs:annotation>
			<xs:documentation xml:lang="en">The types of output that can be returned by the service.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="xml"/>
			<xs:enumeration value="json"/>
			<xs:enumeration value="php"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
